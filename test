-- New modern UI design
local InputService = game:GetService('UserInputService');
local TextService = game:GetService('TextService');
local CoreGui = game:GetService('CoreGui');
local Teams = game:GetService('Teams');
local Players = game:GetService('Players');
local RunService = game:GetService('RunService')
local TweenService = game:GetService('TweenService');
local RenderStepped = RunService.RenderStepped;
local LocalPlayer = Players.LocalPlayer;
local Mouse = LocalPlayer:GetMouse();

local FontHandler = {}
local HttpService = game:GetService("HttpService")

local fontsDir = "ecocide/fonts"

if not isfolder(fontsDir) then
    makefolder(fontsDir)
end

function FontHandler:New(Name, Weight, Style, Asset)
    local fontPath = fontsDir .. "/" .. Asset.Id
    local jsonPath = fontsDir .. "/" .. Name .. ".json"

    writefile(fontPath, game:HttpGet(Asset.Url))

    local descriptor = {
        name = Name,
        faces = { {
            name = "Regular",
            weight = Weight,
            style = Style,
            assetId = getcustomasset(fontPath)
        } }
    }
    writefile(jsonPath, HttpService:JSONEncode(descriptor))

    return getcustomasset(jsonPath)
end

function FontHandler:Get(Name)
    local jsonPath = fontsDir .. "/" .. Name .. ".json"
    if isfile(jsonPath) then
        return Font.new(getcustomasset(jsonPath))
    end
end

FontHandler:New("ProggyClean", 200, "normal", {
    Id = "ProggyClean.ttf",
    Url = "https://github.com/SzNeo8083/SzNeo8083.github.io/raw/refs/heads/main/fonts/ProggyClean.ttf"
})

local UIFont = FontHandler:Get("ProggyClean")

local ProtectGui = protectgui or (syn and syn.protect_gui) or (function() end);

local ScreenGui = Instance.new('ScreenGui');
ProtectGui(ScreenGui);

ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global;
ScreenGui.Parent = gethui() or CoreGui;

local Toggles = {};
local Options = {};

getgenv().Toggles = Toggles;
getgenv().Options = Options;

local Library = {
    Registry = {};
    RegistryMap = {};

    HudRegistry = {};

    FontColor = Color3.fromRGB(240, 240, 240);
    MainColor = Color3.fromRGB(30, 30, 35);
    BackgroundColor = Color3.fromRGB(20, 20, 25);
    AccentColor = Color3.fromRGB(100, 150, 255);
    OutlineColor = Color3.fromRGB(50, 50, 60);
    RiskColor = Color3.fromRGB(255, 80, 80),

    Black = Color3.new(0, 0, 0);
    Font = Enum.Font.Gotham,
    CFont = UIFont,
    FontSize = 13,

    OpenedFrames = {};
    DependencyBoxes = {};

    Signals = {};
    ScreenGui = ScreenGui;
    
    CornerRadius = UDim.new(0, 6),
    ElementPadding = 8,
};

local RainbowStep = 0
local Hue = 0

table.insert(Library.Signals, RenderStepped:Connect(function(Delta)
    RainbowStep = RainbowStep + Delta

    if RainbowStep >= (1 / 60) then
        RainbowStep = 0

        Hue = Hue + (1 / 400);

        if Hue > 1 then
            Hue = 0;
        end;

        Library.CurrentRainbowHue = Hue;
        Library.CurrentRainbowColor = Color3.fromHSV(Hue, 0.8, 1);
    end
end))

-- Helper function to add rounded corners
function Library:AddCorner(Instance, Radius)
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = Radius or Library.CornerRadius
    Corner.Parent = Instance
    return Corner
end

-- Helper function to add padding
function Library:AddPadding(Instance, Padding)
    local Pad = Instance.new("UIPadding")
    Pad.PaddingLeft = UDim.new(0, Padding or Library.ElementPadding)
    Pad.PaddingRight = UDim.new(0, Padding or Library.ElementPadding)
    Pad.PaddingTop = UDim.new(0, Padding or Library.ElementPadding)
    Pad.PaddingBottom = UDim.new(0, Padding or Library.ElementPadding)
    Pad.Parent = Instance
    return Pad
end

function Library:SafeCallback(f, ...)
    if (not f) then
        return;
    end;

    if not Library.NotifyOnError then
        return f(...);
    end;

    local success, event = pcall(f, ...);

    if not success then
        local _, i = event:find(":%d+: ");

        if not i then
            return Library:Notify(event);
        end;

        return Library:Notify(event:sub(i + 1), 3);
    end;
end;

function Library:AttemptSave()
    if Library.SaveManager then
        Library.SaveManager:Save();
    end;
end;

function Library:Create(Class, Properties)
    local _Instance = Class;

    if type(Class) == 'string' then
        _Instance = Instance.new(Class);
    end;

    for Property, Value in next, Properties do
        _Instance[Property] = Value;
    end;

    return _Instance;
end;

function Library:ApplyTextStroke(Inst)
    Inst.TextStrokeTransparency = 1;

    Library:Create('UIStroke', {
        Color = Color3.new(0, 0, 0);
        Thickness = 1;
        LineJoinMode = Enum.LineJoinMode.Miter;
        Parent = Inst;
    });
end;

function Library:CreateLabel(Properties, IsHud)
    local _Instance = Library:Create('TextLabel', {
        BackgroundTransparency = 1;
        FontFace = Library.CFont;
        TextColor3 = Library.FontColor;
        TextSize = Library.FontSize;
        TextStrokeTransparency = 0;
    });

    Library:ApplyTextStroke(_Instance);

    Library:AddToRegistry(_Instance, {
        TextColor3 = 'FontColor';
    }, IsHud);

    return Library:Create(_Instance, Properties);
end;

function Library:MakeDraggable(Instance, Cutoff)
    Instance.Active = true;

    Instance.InputBegan:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
            local ObjPos = Vector2.new(
                Mouse.X - Instance.AbsolutePosition.X,
                Mouse.Y - Instance.AbsolutePosition.Y
            );

            if ObjPos.Y > (Cutoff or 40) then
                return;
            end;

            while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                Instance.Position = UDim2.new(
                    0,
                    Mouse.X - ObjPos.X + (Instance.Size.X.Offset * Instance.AnchorPoint.X),
                    0,
                    Mouse.Y - ObjPos.Y + (Instance.Size.Y.Offset * Instance.AnchorPoint.Y)
                );

                RenderStepped:Wait();
            end;
        end;
    end)
end;

function Library:AddToolTip(InfoStr, HoverInstance)
    local X, Y = Library:GetTextBounds(InfoStr, Library.Font, 14);
    local Tooltip = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor,
        BorderColor3 = Library.OutlineColor,
        Size = UDim2.fromOffset(X + 10, Y + 8),
        ZIndex = 100,
        Parent = Library.ScreenGui,
        Visible = false,
    })

    Library:AddCorner(Tooltip)
    
    local Label = Library:CreateLabel({
        Position = UDim2.fromOffset(5, 4),
        Size = UDim2.fromOffset(X, Y);
        TextSize = Library.FontSize;
        Text = InfoStr,
        TextColor3 = Library.FontColor,
        TextXAlignment = Enum.TextXAlignment.Left;
        ZIndex = Tooltip.ZIndex + 1,
        Parent = Tooltip;
    });

    Library:AddToRegistry(Tooltip, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'OutlineColor';
    });

    Library:AddToRegistry(Label, {
        TextColor3 = 'FontColor',
    });

    local IsHovering = false

    HoverInstance.MouseEnter:Connect(function()
        if Library:MouseIsOverOpenedFrame() then
            return
        end

        IsHovering = true

        Tooltip.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 12)
        Tooltip.Visible = true

        while IsHovering do
            RunService.Heartbeat:Wait()
            Tooltip.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 12)
        end
    end)

    HoverInstance.MouseLeave:Connect(function()
        IsHovering = false
        Tooltip.Visible = false
    end)
end

function Library:OnHighlight(HighlightInstance, Instance, Properties, PropertiesDefault)
    HighlightInstance.MouseEnter:Connect(function()
        local Reg = Library.RegistryMap[Instance];

        for Property, ColorIdx in next, Properties do
            Instance[Property] = Library[ColorIdx] or ColorIdx;

            if Reg and Reg.Properties[Property] then
                Reg.Properties[Property] = ColorIdx;
            end;
        end;
    end)

    HighlightInstance.MouseLeave:Connect(function()
        local Reg = Library.RegistryMap[Instance];

        for Property, ColorIdx in next, PropertiesDefault do
            Instance[Property] = Library[ColorIdx] or ColorIdx;

            if Reg and Reg.Properties[Property] then
                Reg.Properties[Property] = ColorIdx;
            end;
        end;
    end)
end;

-- Rest of the library functions remain the same, just update the UI creation parts to use the new design

-- Updated Window creation with modern design
function Library:CreateWindow(...)
    local Arguments = { ... }
    local Config = { AnchorPoint = Vector2.zero }

    if type(...) == 'table' then
        Config = ...;
    else
        Config.Title = Arguments[1]
        Config.AutoShow = Arguments[2] or false;
    end

    if type(Config.Title) ~= 'string' then Config.Title = 'No title' end
    if type(Config.TabPadding) ~= 'number' then Config.TabPadding = 8 end
    if type(Config.MenuFadeTime) ~= 'number' then Config.MenuFadeTime = 0.15 end

    if typeof(Config.Position) ~= 'UDim2' then Config.Position = UDim2.fromOffset(175, 50) end
    if typeof(Config.Size) ~= 'UDim2' then Config.Size = UDim2.fromOffset(550, 600) end

    if Config.Center then
        Config.AnchorPoint = Vector2.new(0.5, 0.5)
        Config.Position = UDim2.fromScale(0.5, 0.5)
    end

    local Window = {
        Tabs = {};
    };

    local Outer = Library:Create('Frame', {
        AnchorPoint = Config.AnchorPoint,
        BackgroundColor3 = Color3.fromRGB(15, 15, 20),
        Position = Config.Position,
        Size = Config.Size,
        Visible = false,
        ZIndex = 1,
        Parent = ScreenGui,
    });

    Library:AddCorner(Outer)
    Library:MakeDraggable(Outer, 35);

    local TopBar = Library:Create('Frame', {
        BackgroundColor3 = Color3.fromRGB(25, 25, 30),
        Size = UDim2.new(1, 0, 0, 35),
        ZIndex = 2,
        Parent = Outer,
    })

    Library:AddCorner(TopBar, UDim.new(0, 6))
    Library:AddToRegistry(TopBar, {
        BackgroundColor3 = function() return Color3.fromRGB(
            math.floor(Library.MainColor.R * 255 * 0.8),
            math.floor(Library.MainColor.G * 255 * 0.8),
            math.floor(Library.MainColor.B * 255 * 0.8)
        ) end
    })

    local WindowLabel = Library:CreateLabel({
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(0, 0, 1, 0),
        Text = Config.Title or '',
        TextXAlignment = Enum.TextXAlignment.Left,
        TextSize = 15,
        ZIndex = 3,
        Parent = TopBar,
    });

    local MainContainer = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor,
        Position = UDim2.new(0, 0, 0, 35),
        Size = UDim2.new(1, 0, 1, -35),
        ZIndex = 1,
        Parent = Outer,
    })

    Library:AddToRegistry(MainContainer, {
        BackgroundColor3 = 'MainColor'
    })

    local TabArea = Library:Create('Frame', {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(1, -20, 0, 30),
        ZIndex = 1,
        Parent = MainContainer,
    });

    local TabListLayout = Library:Create('UIListLayout', {
        Padding = UDim.new(0, Config.TabPadding),
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = TabArea,
    });

    local TabContainer = Library:Create('Frame', {
        BackgroundColor3 = Library.BackgroundColor,
        Position = UDim2.new(0, 10, 0, 45),
        Size = UDim2.new(1, -20, 1, -55),
        ZIndex = 2,
        Parent = MainContainer,
    });
    
    Library:AddCorner(TabContainer)
    Library:AddToRegistry(TabContainer, {
        BackgroundColor3 = 'BackgroundColor'
    })

    function Window:SetWindowTitle(Title)
        WindowLabel.Text = Title;
    end;

    function Window:AddTab(Name)
        local Tab = {
            Groupboxes = {};
            Tabboxes = {};
        };

        local TabButton = Library:Create('TextButton', {
            BackgroundColor3 = Color3.fromRGB(40, 40, 45),
            Size = UDim2.new(0, 100, 1, 0),
            Text = '',
            AutoButtonColor = false,
            ZIndex = 3,
            Parent = TabArea,
        });

        Library:AddCorner(TabButton)
        Library:AddToRegistry(TabButton, {
            BackgroundColor3 = function() 
                return Color3.fromRGB(
                    math.floor(Library.BackgroundColor.R * 255 * 1.2),
                    math.floor(Library.BackgroundColor.G * 255 * 1.2),
                    math.floor(Library.BackgroundColor.B * 255 * 1.2)
                )
            end
        })

        local TabButtonLabel = Library:CreateLabel({
            Size = UDim2.new(1, 0, 1, 0),
            Text = Name,
            ZIndex = 4,
            Parent = TabButton,
        });

        local TabFrame = Library:Create('Frame', {
            Name = 'TabFrame',
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = false,
            ZIndex = 2,
            Parent = TabContainer,
        });

        local LeftSide = Library:Create('ScrollingFrame', {
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 5, 0, 5),
            Size = UDim2.new(0.5, -7, 1, -10),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = Library.AccentColor,
            ZIndex = 2,
            Parent = TabFrame,
        });

        Library:AddToRegistry(LeftSide, {
            ScrollBarImageColor3 = 'AccentColor'
        })

        local RightSide = Library:Create('ScrollingFrame', {
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0.5, 2, 0, 5),
            Size = UDim2.new(0.5, -7, 1, -10),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = Library.AccentColor,
            ZIndex = 2,
            Parent = TabFrame,
        });

        Library:AddToRegistry(RightSide, {
            ScrollBarImageColor3 = 'AccentColor'
        })

        Library:Create('UIListLayout', {
            Padding = UDim.new(0, 10),
            FillDirection = Enum.FillDirection.Vertical,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = LeftSide,
        });

        Library:Create('UIListLayout', {
            Padding = UDim.new(0, 10),
            FillDirection = Enum.FillDirection.Vertical,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = RightSide,
        });

        for _, Side in next, { LeftSide, RightSide } do
            Side:WaitForChild('UIListLayout'):GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                Side.CanvasSize = UDim2.fromOffset(0, Side.UIListLayout.AbsoluteContentSize.Y + 10);
            end);
        end;

        function Tab:ShowTab()
            for _, Tab in next, Window.Tabs do
                Tab:HideTab();
            end;

            TabButton.BackgroundColor3 = Library.AccentColor
            TabFrame.Visible = true;
        end;

        function Tab:HideTab()
            TabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            TabFrame.Visible = false;
        end;

        function Tab:AddGroupbox(Info)
            local Groupbox = {};

            local BoxOuter = Library:Create('Frame', {
                BackgroundColor3 = Library.BackgroundColor,
                Size = UDim2.new(1, 0, 0, 0),
                ZIndex = 3,
                Parent = Info.Side == 1 and LeftSide or RightSide,
            });

            Library:AddCorner(BoxOuter)
            Library:AddToRegistry(BoxOuter, {
                BackgroundColor3 = 'BackgroundColor'
            })

            local BoxHeader = Library:Create('Frame', {
                BackgroundColor3 = Color3.fromRGB(30, 30, 35),
                Size = UDim2.new(1, 0, 0, 30),
                ZIndex = 4,
                Parent = BoxOuter,
            });

            Library:AddCorner(BoxHeader, UDim.new(0, 6))
            Library:AddToRegistry(BoxHeader, {
                BackgroundColor3 = function() 
                    return Color3.fromRGB(
                        math.floor(Library.BackgroundColor.R * 255 * 1.5),
                        math.floor(Library.BackgroundColor.G * 255 * 1.5),
                        math.floor(Library.BackgroundColor.B * 255 * 1.5)
                    )
                end
            })

            local GroupboxLabel = Library:CreateLabel({
                Size = UDim2.new(1, -10, 1, 0),
                Position = UDim2.new(0, 10, 0, 0),
                TextSize = 14,
                Text = Info.Name,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 5,
                Parent = BoxHeader,
            });

            local Container = Library:Create('Frame', {
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 5, 0, 35),
                Size = UDim2.new(1, -10, 1, -40),
                ZIndex = 1,
                Parent = BoxOuter,
            });

            Library:Create('UIListLayout', {
                Padding = UDim.new(0, 5),
                FillDirection = Enum.FillDirection.Vertical,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = Container,
            });

            function Groupbox:Resize()
                local Size = 0;

                for _, Element in next, Groupbox.Container:GetChildren() do
                    if (not Element:IsA('UIListLayout')) and Element.Visible then
                        Size = Size + Element.Size.Y.Offset;
                    end;
                end;

                BoxOuter.Size = UDim2.new(1, 0, 0, 35 + Size + 10);
            end;

            Groupbox.Container = Container;
            setmetatable(Groupbox, BaseGroupbox);

            Groupbox:AddBlank(5);
            Groupbox:Resize();

            Tab.Groupboxes[Info.Name] = Groupbox;

            return Groupbox;
        end;

        function Tab:AddLeftGroupbox(Name)
            return Tab:AddGroupbox({ Side = 1; Name = Name; });
        end;

        function Tab:AddRightGroupbox(Name)
            return Tab:AddGroupbox({ Side = 2; Name = Name; });
        end;

        TabButton.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                Tab:ShowTab();
            end;
        end);

        if #TabContainer:GetChildren() == 1 then
            Tab:ShowTab();
        end;

        Window.Tabs[Name] = Tab;
        return Tab;
    end;

    -- Modern toggle animation
    local TransparencyCache = {};
    local Toggled = false;
    local Fading = false;

    function Library:Toggle()
        if Fading then
            return;
        end;

        local FadeTime = Config.MenuFadeTime;
        Fading = true;
        Toggled = (not Toggled);

        if Toggled then
            Outer.Visible = true;
            
            -- Fade in animation
            Outer.BackgroundTransparency = 1
            TopBar.BackgroundTransparency = 1
            
            TweenService:Create(Outer, TweenInfo.new(FadeTime, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 0
            }):Play()
            
            TweenService:Create(TopBar, TweenInfo.new(FadeTime, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 0
            }):Play()
        else
            -- Fade out animation
            TweenService:Create(Outer, TweenInfo.new(FadeTime, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 1
            }):Play()
            
            TweenService:Create(TopBar, TweenInfo.new(FadeTime, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 1
            }):Play()
            
            task.wait(FadeTime)
            Outer.Visible = false
        end

        Fading = false;
    end

    if Config.AutoShow then task.spawn(Library.Toggle) end

    Window.Holder = Outer;

    return Window;
end;

-- Updated notification system
function Library:Notify(Text, Time)
    local XSize, YSize = Library:GetTextBounds(Text, Library.Font, 14);

    local NotifyOuter = Library:Create('Frame', {
        BackgroundColor3 = Color3.fromRGB(30, 30, 35),
        Position = UDim2.new(1, 0, 0, 10),
        Size = UDim2.new(0, 0, 0, YSize + 20),
        AnchorPoint = Vector2.new(1, 0),
        ClipsDescendants = true,
        ZIndex = 100,
        Parent = Library.NotificationArea,
    });

    Library:AddCorner(NotifyOuter)

    local NotifyInner = Library:Create('Frame', {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 101,
        Parent = NotifyOuter,
    });

    local NotifyLabel = Library:CreateLabel({
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(1, -15, 1, 0),
        Text = Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextSize = 14,
        ZIndex = 102,
        Parent = NotifyInner,
    });

    local LeftBar = Library:Create('Frame', {
        BackgroundColor3 = Library.AccentColor,
        Size = UDim2.new(0, 5, 1, 0),
        ZIndex = 103,
        Parent = NotifyOuter,
    });

    Library:AddToRegistry(LeftBar, {
        BackgroundColor3 = 'AccentColor'
    })

    pcall(NotifyOuter.TweenSize, NotifyOuter, UDim2.new(0, XSize + 30, 0, YSize + 20), 'Out', 'Quad', 0.3, true);

    task.spawn(function()
        wait(Time or 5);

        pcall(NotifyOuter.TweenSize, NotifyOuter, UDim2.new(0, 0, 0, YSize + 20), 'Out', 'Quad', 0.3, true);

        wait(0.3);

        NotifyOuter:Destroy();
    end);
end;

-- Updated watermark
function Library:SetWatermark(Text)
    local X, Y = Library:GetTextBounds(Text, Library.Font, 14);
    Library.Watermark.Size = UDim2.new(0, X + 30, 0, Y + 15);
    Library:SetWatermarkVisibility(true)

    Library.WatermarkText.Text = Text;
end;

-- Rest of the library implementation remains the same...

getgenv().Library = Library
return Library
